[
 {
  "id": 24161,
  "email": "a@student.gu.se",
  "solved": false,
  "solved_model": false,
  "feedback": "Your program is not defined on all possible input. We cannot give a definitive diagnosis, please continue implementing the solution.",
  "code": "fromBin :: [Int] -> Int\nformBin [] = 0\nfromBin [x] = x\nfromBin (x:xs) = x * 2 ^ (length xs) + fromBin(xs)",
  "typesig": "",
  "input": "fromBin :: [Int] -> Int\nformBin [] = 0\nfromBin [x] = x\nfromBin (x:xs) = x * 2 ^ (length xs) + fromBin(xs)",
  "category": "Missing",
  "exerciseid": "haskell/encoding/fromBin"
 },
 {
  "id": 24321,
  "email": "a@student.gu.se",
  "solved": false,
  "solved_model": false,
  "feedback": "Your program is not defined on all possible input. We cannot give a definitive diagnosis, please continue implementing the solution.",
  "code": "fromBin :: [Int] -> Int\nfromBin [x] = x",
  "typesig": "",
  "input": "fromBin :: [Int] -> Int\nfromBin [x] = x",
  "category": "Missing",
  "exerciseid": "haskell/encoding/fromBin"
 },
 {
  "id": 24331,
  "email": "a@student.gu.se",
  "solved": false,
  "solved_model": false,
  "feedback": "Your program is not defined on all possible input. We cannot give a definitive diagnosis, please continue implementing the solution.",
  "code": "fromBin :: [Int] -> Int\nfromBin [x] = x\nfromBin (x:xs) = x * 2 ^ (length xs) + fromBin xs",
  "typesig": "",
  "input": "fromBin :: [Int] -> Int\nfromBin [x] = x\nfromBin (x:xs) = x * 2 ^ (length xs) + fromBin xs",
  "category": "Missing",
  "exerciseid": "haskell/encoding/fromBin"
 },
 {
  "id": 8838,
  "email": "gusgabrbe@student.gu.se",
  "solved": false,
  "solved_model": false,
  "feedback": "Your program is not defined on all possible input. We cannot give a definitive diagnosis, please continue implementing the solution.",
  "code": "mylength :: [a] -> Int\nmylength [x] = 1\nmylength (x:xs) = 1 + mylength xs",
  "typesig": "",
  "input": "mylength :: [a] -> Int\nmylength [x] = 1\nmylength (x:xs) = 1 + mylength xs",
  "category": "Missing",
  "exerciseid": "haskell/list/mylength"
 },
 {
  "id": 9923,
  "email": "melvinla@chalmers.se",
  "solved": false,
  "solved_model": false,
  "feedback": "Your program is not defined on all possible input. We cannot give a definitive diagnosis, please continue implementing the solution.",
  "code": "encode :: Eq a => [a] -> [(Int, a)]\nencode (x:xs) = (l, x) : encode rest\n  where\n    l = length (takeWhile (==x) (x:xs))\n    rest = dropWhile (==x) xs",
  "typesig": "",
  "input": "encode :: Eq a => [a] -> [(Int, a)]\nencode (x:xs) = (l, x) : encode rest\n  where\n    l = length (takeWhile (==x) (x:xs))\n    rest = dropWhile (==x) xs",
  "category": "Missing",
  "exerciseid": "haskell/list/encode"
 },
 {
  "id": 12192,
  "email": "sevelin@student.chalmers.se",
  "solved": false,
  "solved_model": false,
  "feedback": "Your program is not defined on all possible input. We cannot give a definitive diagnosis, please continue implementing the solution.",
  "code": "compress :: Eq a => [a] -> [a]\ncompress [x] = []\ncompress (x:y:ys)\n  | x == y = x : compress ys\n  | otherwise = x : compress (y:ys)\n",
  "typesig": "",
  "input": "compress :: Eq a => [a] -> [a]\ncompress [x] = []\ncompress (x:y:ys)\n  | x == y = x : compress ys\n  | otherwise = x : compress (y:ys)\n",
  "category": "Missing",
  "exerciseid": "haskell/list/compress"
 },
 {
  "id": 12228,
  "email": "sevelin@student.chalmers.se",
  "solved": false,
  "solved_model": false,
  "feedback": "Your program is not defined on all possible input. We cannot give a definitive diagnosis, please continue implementing the solution.",
  "code": "compress :: Eq a => [a] -> [a]\ncompress [] = []\ncompress (x:y:ys)\n  | x == y = x : compress ys\n  | otherwise = x : compress (y:ys)\n",
  "typesig": "",
  "input": "compress :: Eq a => [a] -> [a]\ncompress [] = []\ncompress (x:y:ys)\n  | x == y = x : compress ys\n  | otherwise = x : compress (y:ys)\n",
  "category": "Missing",
  "exerciseid": "haskell/list/compress"
 },
 {
  "id": 13552,
  "email": "rezvan@chalmers.se",
  "solved": false,
  "solved_model": false,
  "feedback": "Your program is not defined on all possible input. We cannot give a definitive diagnosis, please continue implementing the solution.",
  "code": "fromBin :: [Int] -> Int\nfromBin (x : xs) = 5",
  "typesig": "",
  "input": "fromBin :: [Int] -> Int\nfromBin (x : xs) = 5",
  "category": "Missing",
  "exerciseid": "haskell/encoding/fromBin"
 }
]